С помощью ассемблерной команды обнулите то, что лежит в регистре eax.
xor eax, eax
Или
mov eax, 0

С помощью ассемблерной команды установите в регистр eax единицу.
xor eax, eax
inc eax

С помощью ассемблерной команды увеличьте число в регистре ax на единицу.
При этом портить старшие части регистра eax (и rax) нельзя.
inc ax

С помощью ассемблерной команды уменьшите число в регистре ax на единицу.
При этом портить старшие части регистра eax (и rax) нельзя.
dec ax

Сложите ax и bx, результат поместите в dx.
Все регистры, кроме dx, должны сохранить своё значение.
mov dx, ax
add dx, bx

Найдите разницу rax и rbx, результат поместите в rdx.
Все регистры, кроме rdx должны сохранить своё значение.
mov rdx, rax
sub rdx, rbx

Перемножьте al и bl, результат поместите в dx.
-128 <= al <= 127 и -128 <= bl <= 127, но ah и bh могут быть ненулевые.
imul bl
mov dx, ax

Разделите ax на bx, результат поместите в dx.
При этом изначально dx может содержать любое значение.
cwd
idiv bx
mov dx, ax 

Вычислите выражение: rdx=rax+8*rbx
Никакие другие регистры, кроме rdx, не должны изменить своего значения.
lea rdx, [rax + 8 * rbx]

Вычислите выражение: rdx=rax*5
Никакие другие регистры, кроме rdx, не должны изменить своего значения.
lea rdx, [rax + 4 * rax]

Вычислите выражение: edx=eax+8*ebx
Никакие другие регистры, кроме edx, не должны изменить своего значения.
lea edx, [eax + 8 * ebx]

Равны ли числа в регистрах ax и bx? Если да, выведите в dx единицу, иначе 0.
Остальные регистры портить нельзя.
cmp ax, bx
jne ok
mov dx, 1
jmp neok
ok:
mov dx, 0
neok:

Вычислите факториал al, результат верните через edx.
Разрешается пользоваться любыми регистрами процессора.
xor edx, edx
inc edx
cmp al, 0
je end
mov cl, al
mov eax, ecx
loop:
cmp ecx, 1
mov edx, eax
jle end
dec ecx
mul ecx
jmp loop
end:

Вычислите факториал al, результат верните через rdx.
Разрешается пользоваться любыми регистрами процессора.
xor rdx, rdx
inc rdx
cmp al, 0
je end
mov cl, al
mov rax, rcx
loop:
cmp rcx, 1
mov rdx, rax
jle end
dec rcx
mul rcx
jmp loop
end:

Найдите положительное число, факториал которого лежит в регистре eax. Результат верните через регистр ebx.
Разрешается пользоваться любыми регистрами процессора.
xor ecx, ecx
inc ecx
loop:
cmp eax, 1
je end
inc ecx
cdq
div ecx
jmp loop
end:
mov ebx, ecx

Найдите положительное число, факториал которого лежит в регистре rax. Результат верните через регистр rbx.
Разрешается пользоваться любыми регистрами процессора.
xor rcx, rcx
inc rcx
loop:
cmp rax, 1
je end
inc rcx
cqo
div rcx
jmp loop
end:
mov rbx, rcx

В регистре rax лежит адрес начала массива.
В регистре rcx лежит количество элементов массива.
В регистр rbx положите сумму элементов массива.
В массиве лежат 64-битные целые числа
xor rbx, rbx
cmp rcx, 0
je end
dec rcx
loop:
lea rdx, [rax + 8 * rcx]
add rbx, [rdx]
dec rcx
cmp rcx, -1
je end
jmp loop
end:

Это же для 32 бит
xor ebx, ebx
cmp ecx, 0
je end
dec ecx
loop:
lea edx, [eax + 4 * ecx]
add ebx, [edx]
dec ecx
cmp ecx, -1
je end
jmp loop
end:
